%% Call HAS for H101
clear all
% uses files generated by slicer
% inputs:
% CTcropped.nii
% H101_simspace.nii
%   - both of these share same resolution and FOV 

% outputs:
% pfield

% options to set:
% Filepaths %%%%%%%%%%%%%%
%   path2H101plane: (complexe pressure plane at transducer face
p2p = 'H101plane.mat';

%   path to CT
CTfn = 'CTsimspace.nii';
%   path to Xdcr simspace volume
Xdfn = 'H101simspace.nii';
%   output filename
fno = 'pH101.nii';

% others %%%%%%%%%%%%%%%%%
% frequency
freq = 1.1E6; %Mhz
% zero padding size
zps = 100;

% todo %%%%%%%%%%%%%%%%%%%%%
% height_pix: using this variable to account for the spherical cap height
%   will have to update this for all xdcr files
% usf for xdcr plane: this one is 1.25x (goes from .3125 mm to .25 mm
%   sampling). This needs to be a tunable parameter
%   sim vox size: using .25mm here, not hard coded in

% Prep to call HAS

%   load CT
CT = niftiread(CTfn);
%   load Xdcr
xdcr = niftiread(Xdfn);

% xdcr focus pos ==1, top of cap ==2
%%
% rotate volumes to be sampled along xdcr axis
% rots stores rotations applied along z and x axis respectively
[XDr, CTr, rots] = resampleVolumeAlongAxis(xdcr,CT);

% check rotation for correctness

subplot(131)
imagesc(squeeze(sum(XDr,3)))
axis image
title('XY')
subplot(132)
imagesc(squeeze(sum(XDr,2)))
axis image
title('XZ')
subplot(133)
imagesc(squeeze(sum(XDr,1)))
axis image
title('YZ')

%% now prepare xdcr plane
load('H101plane.mat');
p0 = H101plane;


%this plane is .3125 mm vox, resample to be .5

p0 = imresize(p0,.625);
dimp0 = size(p0);

% find where this plane should lie in CTr (rotated CT simspace)
I = find(XDr==2);
[x y z] = ind2sub(size(XDr),I(1)); %top of spherical cap
tc = [x y z];
clear x y z I

% offset top of cap in x dim to get xdcr face
height_pix = 41-23;
tc(1) = tc(1)+height_pix;

CTfin = CTr(tc(1):end,...
    tc(2)-floor(dimp0(1)/2):tc(2)+ceil(dimp0(1)/2)-1,...
    tc(3)-floor(dimp0(2)/2):tc(3)+ceil(dimp0(2)/2)-1);

% free up memory
%clear CTr CT XDr xdcr H101plane 

%% get density and SOS matrices
medium = getAcousticProperties(double(CTfin));
% this was made to propogate along third dim so use permute
SOS = permute(medium.sound_speed,[2 3 1]);
SOS = single(SOS);
rho = permute(medium.density,[2 3 1]);
rho = single(rho);
%clear medium

%% zero pad SOS,rho, and p0

SOS = padarray(SOS,[zps,zps,0],1480);
rho = padarray(rho,[zps,zps,0],997);
p0 = padarray(p0,[zps,zps],0);

%% try out in water
% SOS = 1480.*SOS./SOS;
% rho = 997.*rho./rho;


%% call HAS
%p = HASv2(p0,vox,f,sos,density)
[p,~,~] = HASv4(p0,.5E-3,freq,SOS,rho);

% ok now time to work backward and load back into slicer
p = imgaussfilt3(abs(p),1);
%clear sos rho p0
% unpad
p2 = p(zps+1:end-zps,zps+1:end-zps,:);

% putt back in order of CTfin
% should match size of CTfin
p2 = permute(p2,[3 1 2]);

% add pixels back that were lost when plane was placed in CTfin
% p3 should match size of CTr
p3 = zeros(size(CTr));
p3(tc(1):end,...
    tc(2)-floor(dimp0(1)/2):tc(2)+ceil(dimp0(1)/2)-1,...
    tc(3)-floor(dimp0(2)/2):tc(3)+ceil(dimp0(2)/2)-1) = p2;

% reverse rotate
pr = rotateAboutZandX(p3,rots);

% write out nifti with p field using input metadata
II = niftiinfo(Xdfn);

%
II.Filename = fno;
niftiwrite(pr,fno,II);
















